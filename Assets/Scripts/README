A:
I tried 3 different ways to accomplish breaking.

the first was to add a navMeshObstacle to the Agent object, which produced very
glitchy results since the agent would try to teleported away because it considered
itself an obstacle.

The second, I tried to put a collider in front of the agent to detect if another agent
was in front of it and set isStopped = false. this worked fairly well, but could result
in a situation where if two agents faced eachother close up, they would be permanently stuck.

The third was to use breaking distance in the navMeshAgent properties. by seting this higher
an agent would be satisfied by only getting so close to a goal. the agents would push
eachother a little bit to get in that distance but usualy it became stable and it wouldn't
create a mosh pit around the destination point, this was the option we went with
but we included the script for the second one so you could see.

B:
another way to implement obstacle avoidance without carving is to bake the obstacle on
to the nav mesh, and you can set the obstacle to a non walkable area.

C:
Carving work well for on the fly navigation, because it updates the nav mesh and an
agent could walk around it, whereas baking is permanent and you cant move obstacles.
you could also use a detector to pause the agent while the obstacle is in the way,
but an agent wouldn't be aware they could go around it on the nav mesh potentially.
the main probelm with carving is performance, since the nav mesh is being updated a lot.
if you used carving for everything it would slow down the simulation. in general carving
is good if you have a few moving obstacles, and baking is excelent for static obstacles.

