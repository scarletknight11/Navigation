A:
For the new braking mechanism we recycled the one we made for the Animations project.
it has a collider in front of the agent to detect how many agents are infront of it.
if its within the stopping distance it will stop, or if its within K * neighboors
distance it will also stop so that it doesn't keep trying to push through neigboors
to get to the destiation. the size of the collider and this constant can be tuned
for the agent size and how many their are.

when an agent stops, it becomes an obstacle so that other agents move around them
instead of pushing.

B:
another way to implement obstacle avoidance without carving is to bake the obstacle on
to the nav mesh, and you can set the obstacle to a non walkable area.
aditionally you can apply an obstacle force to the agent along with a navigation force
to push it around the obstacle.

C:
Carving work well for on the fly navigation, because it updates the nav mesh and an
agent could walk around it, whereas baking is permanent and you cant move obstacles.
you could also use a detector to pause the agent while the obstacle is in the way,
but an agent wouldn't be aware they could go around it on the nav mesh potentially.
the main probelm with carving is performance, since the nav mesh is being updated a lot.
if you used carving for everything it would slow down the simulation. in general carving
is good if you have a few moving obstacles, and baking is excelent for static obstacles.
the issue with a navigation+obstacle force for avoiding an obstical is that if the obstacle
is concave the agent could be trapped in a local minima.

changelog:
*slightly better camera
*- shift/space to lower works
*multi select now works
*added arrow keys obstacle (left/right)
*added breaking mechanism
add commit log
video: 